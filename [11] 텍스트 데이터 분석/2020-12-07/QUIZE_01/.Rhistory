install.packages("ggmap")
install.packages("ggplot2")
install.packages("raster")
install.packages("rgeos")
install.packages("maptools")
install.packages("rgdal")
library(ggmap)
library(ggplot2)
library(raster)
library(rgeos)
library(maptools)
library(rgdal)
P <- read.csv("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/airdata.csv", header = TRUE) #시각화할 데이터셋
map <- shapefile("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/SIG_201703/TL_SCCO_SIG.shp") #지리 정보 데이터셋
map@polygons[[1]]@Polygons[[1]]@coords %>% head(n = 10L)
# 지리 정보 자료에는 대한민국 모든 구가 포함되어 있는데, id가 11740 이하가 서울시 구에 해당합니다. 따라서 현재 문자형인 id 변수를 숫자로 변환한 후 11740 이하만 추출하여 seoul_map 변수를 생성
new_map$id <- as.numeric(new_map$id)
seoul_map <- new_map[new_map$id <= 11740,]
# 시각화할 자료와 seoul_map에 id 변수가 존재할테며 이를 key로 조인을 할 차례입니다. 다음과 같이 merge() 함수를 이용
P_merge <- merge(seoul_map, P, by='id')
# 구별 경계 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group), fill = 'white', color='black')
# 구별로 값에 따라 진하기가 다른 지도가 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
#  geom_point(colour="white", fill="red", shape=21)+
#  scale_size_area(max_size = 50)+
#  geom_text(size=4)
plot <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE) + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
# 시각화할 자료와 seoul_map에 id 변수가 존재할테며 이를 key로 조인을 할 차례입니다. 다음과 같이 merge() 함수를 이용
P_merge <- merge(seoul_map, P, by='id')
new_map$id <- as.numeric(new_map$id)
seoul_map <- new_map[new_map$id <= 11740,]
new_map$id <- as.numeric(new_map$id)
new_map <- fortify(map, region = 'SIG_CD')
View(new_map)
# 지리 정보 자료에는 대한민국 모든 구가 포함되어 있는데, id가 11740 이하가 서울시 구에 해당합니다. 따라서 현재 문자형인 id 변수를 숫자로 변환한 후 11740 이하만 추출하여 seoul_map 변수를 생성
new_map$id <- as.numeric(new_map$id)
seoul_map <- new_map[new_map$id <= 11740,]
# 시각화할 자료와 seoul_map에 id 변수가 존재할테며 이를 key로 조인을 할 차례입니다. 다음과 같이 merge() 함수를 이용
P_merge <- merge(seoul_map, P, by='id')
# 구별 경계 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group), fill = 'white', color='black')
# 구별로 값에 따라 진하기가 다른 지도가 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
#  geom_point(colour="white", fill="red", shape=21)+
#  scale_size_area(max_size = 50)+
#  geom_text(size=4)
plot <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE) + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "서울시 호흡기질환사망") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
#  geom_point(colour="white", fill="red", shape=21)+
#  scale_size_area(max_size = 50)+
#  geom_text(size=4)
plot <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE) + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
geom_point(colour="white", fill="red", shape=21)+
scale_size_area(max_size = 50)+
geom_text(size=4)
# 구별로 값에 따라 진하기가 다른 지도가 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
#  ggplot을 활용하여 지도를 변형
#  서울시 호흡기질환사망
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
geom_point(colour="white", fill="red", shape=21)+
scale_size_area(max_size = 50)+
geom_text(size=4)
plot <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE) + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "서울시 호흡기질환사망") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
gg <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE)
plot <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE) + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "서울시 호흡기질환사망") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
gg <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE)
gg <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE)
gg + geom_point(colour="white", fill="red", shape=21)
#  ggplot을 활용하여 지도를 변형
#  서울시 호흡기질환사망
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
geom_point(colour="white", fill="red", shape=21)+
scale_size_area(max_size = 50)+
geom_text(size=4)
# 구별 경계 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group), fill = 'white', color='black')
#  map을 spTransform() 함수를 이용하여 좌표계 변환을 진행
map <- spTransform(map, CRSobj = CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
#  fortify() 함수를 이용하여 map을 data frame으로 변환합니다. 이때, region = ‘SIG_CD’ 옵션으로 인해 SIG_CD 컬럼이 id로 변환
new_map <- fortify(map, region = 'SIG_CD')
# 지리 정보 자료에는 대한민국 모든 구가 포함되어 있는데, id가 11740 이하가 서울시 구에 해당합니다. 따라서 현재 문자형인 id 변수를 숫자로 변환한 후 11740 이하만 추출하여 seoul_map 변수를 생성
new_map$id <- as.numeric(new_map$id)
# 시각화할 자료와 seoul_map에 id 변수가 존재할테며 이를 key로 조인을 할 차례입니다. 다음과 같이 merge() 함수를 이용
P_merge <- merge(seoul_map, P, by='id')
# 구별 경계 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group), fill = 'white', color='black')
# 구별로 값에 따라 진하기가 다른 지도가 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
#  ggplot을 활용하여 지도를 변형
#  서울시 호흡기질환사망
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
geom_point(colour="white", fill="red", shape=21)+
scale_size_area(max_size = 50)+
geom_text(size=4)
plot <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE) + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
View(plot)
View(seoul_map)
P <- read.csv("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/airdata.csv", header = TRUE) #시각화할 데이터셋
map <- shapefile("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/SIG_201703/TL_SCCO_SIG.shp") #지리 정보 데이터셋
#  map을 spTransform() 함수를 이용하여 좌표계 변환을 진행
map <- spTransform(map, CRSobj = CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
map@polygons[[1]]@Polygons[[1]]@coords %>% head(n = 10L)
#  fortify() 함수를 이용하여 map을 data frame으로 변환합니다. 이때, region = ‘SIG_CD’ 옵션으로 인해 SIG_CD 컬럼이 id로 변환
new_map <- fortify(map, region = 'SIG_CD')
View(new_map)
# 지리 정보 자료에는 대한민국 모든 구가 포함되어 있는데, id가 11740 이하가 서울시 구에 해당합니다. 따라서 현재 문자형인 id 변수를 숫자로 변환한 후 11740 이하만 추출하여 seoul_map 변수를 생성
new_map$id <- as.numeric(new_map$id)
seoul_map <- new_map[new_map$id <= 11740,]
# 시각화할 자료와 seoul_map에 id 변수가 존재할테며 이를 key로 조인을 할 차례입니다. 다음과 같이 merge() 함수를 이용
P_merge <- merge(seoul_map, P, by='id')
# 구별 경계 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group), fill = 'white', color='black')
# 구별로 값에 따라 진하기가 다른 지도가 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
#  ggplot을 활용하여 지도를 변형
#  서울시 호흡기질환사망
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
geom_point(colour="white", fill="red", shape=21)+
scale_size_area(max_size = 50)+
geom_text(size=4)
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "서울시 호흡기질환사망") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
gg <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE)
gg + geom_point(colour="white", fill="red", shape=21)
P <- read.csv("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/airdata.csv", header = TRUE) #시각화할 데이터셋
P <- read.csv("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/airdata.csv", header = TRUE) #시각화할 데이터셋
map <- shapefile("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/SIG_201703/TL_SCCO_SIG.shp") #지리 정보 데이터셋
#  map을 spTransform() 함수를 이용하여 좌표계 변환을 진행
map <- spTransform(map, CRSobj = CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
map@polygons[[1]]@Polygons[[1]]@coords %>% head(n = 10L)
#  fortify() 함수를 이용하여 map을 data frame으로 변환합니다. 이때, region = ‘SIG_CD’ 옵션으로 인해 SIG_CD 컬럼이 id로 변환
new_map <- fortify(map, region = 'SIG_CD')
View(new_map)
# 지리 정보 자료에는 대한민국 모든 구가 포함되어 있는데, id가 11740 이하가 서울시 구에 해당합니다. 따라서 현재 문자형인 id 변수를 숫자로 변환한 후 11740 이하만 추출하여 seoul_map 변수를 생성
new_map$id <- as.numeric(new_map$id)
seoul_map <- new_map[new_map$id <= 11740,]
# 시각화할 자료와 seoul_map에 id 변수가 존재할테며 이를 key로 조인을 할 차례입니다. 다음과 같이 merge() 함수를 이용
P_merge <- merge(seoul_map, P, by='id')
# 구별 경계 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group), fill = 'white', color='black')
# 구별로 값에 따라 진하기가 다른 지도가 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
#  ggplot을 활용하여 지도를 변형
#  서울시 호흡기질환사망
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
geom_point(colour="white", fill="red", shape=21)+
scale_size_area(max_size = 50)+
geom_text(size=4)
plot <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE) + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "서울시 호흡기질환사망") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
gg <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE)
gg + geom_point(colour="white", fill="red", shape=21)
# ggplot 코드: plot에 기본 틀을 넣고 ggplot의 여러 함수로 세부 옵션 조정.
# scale_fill_gradient()를 통해 숫자가 높으면 진한 색, 숫자가 낮으면 연한 색으로 구분할 수 있도록 변경
# theme_bw()로 뒷배경 제거
# labs()로 제목 추가
# theme()으로 plot의 기본 격자 제거
P <- read.csv("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/airdata.csv", header = TRUE) #시각화할 데이터셋
map <- shapefile("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/SIG_201703/TL_SCCO_SIG.shp") #지리 정보 데이터셋
P <- read.csv("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/airdata.csv", header = TRUE) #시각화할 데이터셋
map <- shapefile("G:/서울기술교육센터/[11] 텍스트 데이터 분석/2020-12-07/QUIZE_01/SIG_201703/TL_SCCO_SIG.shp") #지리 정보 데이터셋
#  map을 spTransform() 함수를 이용하여 좌표계 변환을 진행
map <- spTransform(map, CRSobj = CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
map@polygons[[1]]@Polygons[[1]]@coords %>% head(n = 10L)
#  fortify() 함수를 이용하여 map을 data frame으로 변환합니다. 이때, region = ‘SIG_CD’ 옵션으로 인해 SIG_CD 컬럼이 id로 변환
new_map <- fortify(map, region = 'SIG_CD')
View(new_map)
# 지리 정보 자료에는 대한민국 모든 구가 포함되어 있는데, id가 11740 이하가 서울시 구에 해당합니다. 따라서 현재 문자형인 id 변수를 숫자로 변환한 후 11740 이하만 추출하여 seoul_map 변수를 생성
new_map$id <- as.numeric(new_map$id)
seoul_map <- new_map[new_map$id <= 11740,]
# 시각화할 자료와 seoul_map에 id 변수가 존재할테며 이를 key로 조인을 할 차례입니다. 다음과 같이 merge() 함수를 이용
P_merge <- merge(seoul_map, P, by='id')
# 시각화할 자료와 seoul_map에 id 변수가 존재할테며 이를 key로 조인을 할 차례입니다. 다음과 같이 merge() 함수를 이용
P_merge <- merge(seoul_map, P, by='id')
# 구별 경계 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group), fill = 'white', color='black')
# 구별로 값에 따라 진하기가 다른 지도가 그리기
ggplot() + geom_polygon(data = P_merge, aes(x=long, y=lat, group=group, fill = 호흡기질환사망))
ggplot (P_merge, aes(x=long, y=lat, size=초미세먼지, label=시군구명), guide=FALSE)+
geom_point(colour="white", fill="red", shape=21)+
scale_size_area(max_size = 50)+
geom_text(size=4)
gg <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE)
gg + geom_point(colour="white", fill="red", shape=21)
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "김민서서") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "김민서") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "박형준") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
gg <- ggplot(P, aes(x=slong, y=slat, size=초미세먼지, label=시군구명), guide=FALSE)
gg + geom_point(colour="white", fill="red", shape=21)
plot + scale_fill_gradient(low = "#FBCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "박형준") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
plot + scale_fill_gradient(low = "#FFCF61", high = "#00CC99", space = "Lab", guide = "colourbar") +
theme_bw() + labs(title = "박형준") + theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), plot.title = element_text(face = "bold", size = 18, hjust = 0.5)) +
geom_point(colour="white", fill="red", shape=21) +  #대기 점찍기
geom_text(size=3)
